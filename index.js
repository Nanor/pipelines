// Generated by CoffeeScript 1.10.0
(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $(document).ready(function() {
    var DOWN, Grid, LEFT, Machine, RIGHT, UP, X_SIZE, Y_SIZE, grid;
    X_SIZE = 9;
    Y_SIZE = 5;
    UP = 1;
    RIGHT = 2;
    DOWN = 3;
    LEFT = 4;
    Grid = (function() {
      function Grid(width, height) {
        this.width = width;
        this.height = height;
        this.machines = (function() {
          var j, ref, results;
          results = [];
          for (j = 1, ref = this.width * this.height; 1 <= ref ? j <= ref : j >= ref; 1 <= ref ? j++ : j--) {
            results.push(null);
          }
          return results;
        }).call(this);
        this.edges = (function() {
          var j, ref, results;
          results = [];
          for (j = 1, ref = this.width + this.height + 2 * this.width * this.height; 1 <= ref ? j <= ref : j >= ref; 1 <= ref ? j++ : j--) {
            results.push(null);
          }
          return results;
        }).call(this);
      }

      Grid.prototype.paint = function(element) {
        var c, chars, j, k, l, line, m, machine, machine_chars, n, o, p, px, py, q, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, s, x, y;
        px = (X_SIZE + 1) * this.width + 1;
        py = (Y_SIZE + 1) * this.height + 1;
        chars = (function() {
          var j, ref, results;
          results = [];
          for (j = 1, ref = py; 1 <= ref ? j <= ref : j >= ref; 1 <= ref ? j++ : j--) {
            results.push((function() {
              var k, ref1, results1;
              results1 = [];
              for (k = 1, ref1 = px; 1 <= ref1 ? k <= ref1 : k >= ref1; 1 <= ref1 ? k++ : k--) {
                results1.push(null);
              }
              return results1;
            })());
          }
          return results;
        })();
        for (x = j = 0, ref = px; 0 <= ref ? j < ref : j > ref; x = 0 <= ref ? ++j : --j) {
          for (y = k = 0, ref1 = py; 0 <= ref1 ? k < ref1 : k > ref1; y = 0 <= ref1 ? ++k : --k) {
            if (x % (X_SIZE + 1) === 0 && y % (Y_SIZE + 1) === 0) {
              chars[y][x] = '+';
            }
          }
        }
        for (x = l = 1, ref2 = this.width; 1 <= ref2 ? l < ref2 : l > ref2; x = 1 <= ref2 ? ++l : --l) {
          for (y = m = 1, ref3 = this.height; 1 <= ref3 ? m < ref3 : m > ref3; y = 1 <= ref3 ? ++m : --m) {
            machine = this.getMachine(x, y);
            if (machine != null) {
              machine_chars = machine.paint();
              for (px = n = 0, ref4 = X_SIZE; 0 <= ref4 ? n < ref4 : n > ref4; px = 0 <= ref4 ? ++n : --n) {
                for (py = o = 0, ref5 = Y_SIZE; 0 <= ref5 ? o < ref5 : o > ref5; py = 0 <= ref5 ? ++o : --o) {
                  chars[y * (Y_SIZE + 1) + py + 1][x * (X_SIZE + 1) + px + 1] = machine_chars[py][px];
                }
              }
            }
          }
        }
        for (x = p = 0, ref6 = this.width; 0 <= ref6 ? p < ref6 : p > ref6; x = 0 <= ref6 ? ++p : --p) {
          for (y = q = 0, ref7 = this.height; 0 <= ref7 ? q <= ref7 : q >= ref7; y = 0 <= ref7 ? ++q : --q) {
            chars[y * (Y_SIZE + 1)][x * (X_SIZE + 1) + Math.floor((X_SIZE + 1) / 2)] = this.getEdge(x, y, UP);
          }
        }
        for (x = r = 0, ref8 = this.width; 0 <= ref8 ? r <= ref8 : r >= ref8; x = 0 <= ref8 ? ++r : --r) {
          for (y = s = 0, ref9 = this.height; 0 <= ref9 ? s < ref9 : s > ref9; y = 0 <= ref9 ? ++s : --s) {
            chars[y * (Y_SIZE + 1) + Math.floor((Y_SIZE + 1) / 2)][x * (X_SIZE + 1)] = this.getEdge(x, y, LEFT);
          }
        }
        chars = (function() {
          var len, results, t;
          results = [];
          for (t = 0, len = chars.length; t < len; t++) {
            line = chars[t];
            results.push((function() {
              var len1, results1, u;
              results1 = [];
              for (u = 0, len1 = line.length; u < len1; u++) {
                c = line[u];
                results1.push(c != null ? c : ' ');
              }
              return results1;
            })());
          }
          return results;
        })();
        return element.text(((function() {
          var len, results, t;
          results = [];
          for (t = 0, len = chars.length; t < len; t++) {
            line = chars[t];
            results.push(line.join(''));
          }
          return results;
        })()).join('\n'));
      };

      Grid.prototype.getMachine = function(x, y) {
        return this.machines[this.toMachineIndex(x, y)];
      };

      Grid.prototype.setMachine = function(x, y, value) {
        return this.machines[this.toMachineIndex(x, y)] = value;
      };

      Grid.prototype.toMachineIndex = function(x, y) {
        return x + y * X_SIZE;
      };

      Grid.prototype.getEdge = function(x, y, dir) {
        return this.edges[this.toEdgeIndex(x, y, dir)];
      };

      Grid.prototype.setEdge = function(x, y, dir, value) {
        return this.edges[this.toEdgeIndex(x, y, dir)] = value;
      };

      Grid.prototype.toEdgeIndex = function(x, y, dir) {
        if (dir === UP) {
          return (x + y * X_SIZE) * 2;
        } else if (dir === LEFT) {
          return (x + y * X_SIZE) * 2 + 1;
        } else if (dir === RIGHT) {
          return this.toEdgeIndex(x + 1, y, LEFT);
        } else if (dir === DOWN) {
          return this.toEdgeIndex(x, y + 1, UP);
        }
      };

      Grid.prototype.update = function() {
        var dir, i, j, jammed, k, l, len, m, machine, ref, ref1, ref2, ref3, results, supplied, value, x, y;
        for (x = j = 0, ref = this.width; 0 <= ref ? j < ref : j > ref; x = 0 <= ref ? ++j : --j) {
          for (y = k = 0, ref1 = this.height; 0 <= ref1 ? k < ref1 : k > ref1; y = 0 <= ref1 ? ++k : --k) {
            machine = this.getMachine(x, y);
            if (machine != null) {
              if (machine.contents == null) {
                supplied = true;
                ref2 = machine.inputs;
                for (l = 0, len = ref2.length; l < len; l++) {
                  value = ref2[l];
                  if (this.getEdge(x, y, value) == null) {
                    supplied = false;
                  }
                }
                if (supplied) {
                  machine.contents = (function() {
                    var len1, m, ref3, results;
                    ref3 = machine.inputs;
                    results = [];
                    for (m = 0, len1 = ref3.length; m < len1; m++) {
                      dir = ref3[m];
                      value = this.getEdge(x, y, dir);
                      this.setEdge(x, y, dir, null);
                      results.push(value);
                    }
                    return results;
                  }).call(this);
                  machine.contents = machine["function"](machine.contents);
                }
              }
            }
          }
        }
        results = [];
        for (x = m = 0, ref3 = this.width; 0 <= ref3 ? m < ref3 : m > ref3; x = 0 <= ref3 ? ++m : --m) {
          results.push((function() {
            var len1, len2, n, o, p, ref4, ref5, ref6, results1;
            results1 = [];
            for (y = n = 0, ref4 = this.height; 0 <= ref4 ? n < ref4 : n > ref4; y = 0 <= ref4 ? ++n : --n) {
              machine = this.getMachine(x, y);
              if (machine != null) {
                if (machine.contents != null) {
                  jammed = false;
                  ref5 = machine.outputs;
                  for (o = 0, len1 = ref5.length; o < len1; o++) {
                    value = ref5[o];
                    if (this.getEdge(x, y, value)) {
                      jammed = true;
                    }
                  }
                  if (!jammed) {
                    ref6 = machine.contents;
                    for (i = p = 0, len2 = ref6.length; p < len2; i = ++p) {
                      value = ref6[i];
                      this.setEdge(x, y, machine.outputs[i], value);
                    }
                    results1.push(machine.contents = null);
                  } else {
                    results1.push(void 0);
                  }
                } else {
                  results1.push(void 0);
                }
              } else {
                results1.push(void 0);
              }
            }
            return results1;
          }).call(this));
        }
        return results;
      };

      return Grid;

    })();
    Machine = (function() {
      function Machine(inputs, outputs, _function) {
        this.inputs = inputs != null ? inputs : [];
        this.outputs = outputs != null ? outputs : [];
        this["function"] = _function != null ? _function : (function(i) {
          return i;
        });
        this.contents = null;
      }

      Machine.prototype.paint = function() {
        var chars, dir, in_c, j, len, out_c, ref, ref1, x, y;
        chars = (function() {
          var j, ref, results;
          results = [];
          for (y = j = 0, ref = Y_SIZE; 0 <= ref ? j < ref : j > ref; y = 0 <= ref ? ++j : --j) {
            results.push((function() {
              var k, ref1, results1;
              results1 = [];
              for (x = k = 0, ref1 = X_SIZE; 0 <= ref1 ? k < ref1 : k > ref1; x = 0 <= ref1 ? ++k : --k) {
                results1.push(y === 0 || y === Y_SIZE - 1 ? '-' : x === 0 || x === X_SIZE - 1 ? '|' : ' ');
              }
              return results1;
            })());
          }
          return results;
        })();
        ref = [[UP, 0, Math.floor(X_SIZE / 2), 'V', '^'], [RIGHT, Math.floor(Y_SIZE / 2), X_SIZE - 1, '<', '>'], [DOWN, Y_SIZE - 1, Math.floor(X_SIZE / 2), '^', 'V'], [LEFT, Math.floor(Y_SIZE / 2), 0, '>', '<']];
        for (j = 0, len = ref.length; j < len; j++) {
          ref1 = ref[j], dir = ref1[0], y = ref1[1], x = ref1[2], in_c = ref1[3], out_c = ref1[4];
          chars[y][x] = indexOf.call(this.inputs, dir) >= 0 ? in_c : indexOf.call(this.outputs, dir) >= 0 ? out_c : chars[y][x];
        }
        return chars;
      };

      return Machine;

    })();
    grid = new Grid(5, 5);
    grid.setMachine(1, 1, new Machine([], [DOWN], function() {
      if (this.t != null) {
        return this.t = null;
      } else {
        return this.t = [Math.floor(Math.random() * 4)];
      }
    }));
    grid.setMachine(1, 2, new Machine([UP], [DOWN, RIGHT], function(i) {
      return i.concat(i);
    }));
    grid.setMachine(2, 2, new Machine([LEFT], [DOWN], function(i) {
      return i.map(function(a) {
        return a * 2;
      });
    }));
    grid.setMachine(1, 3, new Machine([UP], [RIGHT]));
    grid.setMachine(2, 3, new Machine([UP, LEFT], [RIGHT], function(i) {
      return [
        i.reduce(function(a, b) {
          return a + b;
        })
      ];
    }));
    grid.setMachine(3, 3, new Machine([LEFT]));
    grid.paint($('.grid'));
    return setInterval(function() {
      grid.update();
      return grid.paint($('.grid'));
    }, 1000);
  });

}).call(this);

//# sourceMappingURL=index.js.map
